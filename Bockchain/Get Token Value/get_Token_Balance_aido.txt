const Web3 = require("web3");
const web3 = new Web3();
web3.setProvider(new 
web3.providers.HttpProvider("https://ropsten.infura.io/7j5r6Zl5i7eZu14WmKIm"));


// Write to the console the script will run shortly
//console.log('Getting contract tokens balance.....');

// Define the address to search witin, one with tokens from the contract preferably
//var addr = ('0x.......................');
var addr = ('0x........................');

// Get the address, log it in the console
//console.log("Address: " + addr);

// Token contract address, used call the token balance of the address in question (Rockblue's address by default)
var contractAddr = ('0x...............');

// Get the address ready for the call, substring removes the '0x', as its not required
var tknAddress = (addr).substring(2);

// '0x70a08231' is the contract 'balanceOf()' ERC20 token function in hex. A zero buffer is required and then we add the previously defined address with tokens
var contractData = ('0x.........' + tknAddress);

// Now we call the token contract with the variables from above, response will be a big number string 
web3.eth.call({
    to: contractAddr, // Contract address, used call the token balance of the address in question
    data: contractData // Combination of contractData and tknAddress, required to call the balance of an address 
    }, function(err, result) {
	if (result) { 
		var tokens = web3.utils.toBN(result).toString(); // Convert the result to a usable number string
		console.log(web3.utils.fromWei(tokens, 'ether')); // Change the string to be in Ether not Wei, and show it in the console
	}
	else {
		console.log(err); // Dump errors here
	}
});




//Web3 = require('web3');
//web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/"));




