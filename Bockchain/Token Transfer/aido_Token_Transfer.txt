


var Web3 = require('web3');


var my_privkey = "...........";
var infura_api_key = ".............";

// Need access to my path and file system
var fs = require('fs');


// Ethereum javascript libraries needed
var Tx = require('ethereumjs-tx');

// Rather than using a local copy of geth, interact with the ethereum blockchain via infura.io
web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/.............'));                                                       

// Create an async function so I can use the "await" keyword to wait for things to finish
const main = async () => {
  // This code was written and tested using web3 version 1.0.0-beta.26
  console.log(`web3 version: ${web3.version}`)

  // Who holds the token now?
  var myAddress = "0x..............";

  // Who are we trying to send this token to?
  var destAddress = "0x..................";

  // If your token is divisible to 8 decimal places, 42 = 0.00000042 of your token
  var transferAmount = 1;

  // Determine the nonce
  var count = await web3.eth.getTransactionCount(myAddress);
  console.log(`num transactions so far: ${count}`);

  // This file is just JSON from the contract page on etherscan.io under "Contract ABI"
  var abiArray = JSON.parse(fs.readFileSync('./tt3.json', 'utf-8'));

  // This is the address of the contract which created the ERC20 token
 var contractAddress = "0x..............";//"0x..................";
  var contract = new web3.eth.Contract(abiArray, contractAddress, { from: myAddress });

  // How many tokens do I have before sending?
  //var balance = await contract.methods.balanceOf(myAddress).call();
//  console.log(`Balance before send: ${balance}`);

  // I chose gas price and gas limit based on what ethereum wallet was recommending for a similar transaction. You may need to change the gas price!
var justdest = (destAddress).substring(2);
var contractData = ('0x..............................' + justdest+ "00000000000000000000000000000000000000000000000.....");                                                    


  var rawTransaction = {
      "from": myAddress,
      "nonce": "0x" + count.toString(16),
      "gasPrice": "0x003B9ACA00",
      "gasLimit": "0x250CA",
      "to": contractAddress,
      "value": "0x0",
      "data": contractData,
      "chainId": 0x03
  };

  // Example private key (do not use): 'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109'
  // The private key must be for myAddress
  var privKey = new Buffer(my_privkey, 'hex');
  var tx = new Tx(rawTransaction);
  tx.sign(privKey);
  var serializedTx = tx.serialize();

  // Comment out these three lines if you don't really want to send the TX right now
  console.log(`Attempting to send signed tx:  ${serializedTx.toString('hex')}`);
  var receipt = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));
  console.log(`Receipt info:  ${JSON.stringify(receipt, null, '\t')}`);

  // The balance may not be updated yet, but let's check
}

main();
